[enable]
define(KEY_NORMAL,0)
define(KEY_EXTENDED,1)

define(VK_CONTROL,11)
define(VK_RSHIFT,A1)
define(VK_INSERT,2D)
define(VK_DELETE,2E)
define(VK_HOME,24)
define(VK_END,23)
define(VK_PRIOR,21)
define(VK_NEXT,22)

define(_HoldAttack,0) //Set flag to 1 for combos, 0 for normal attacks
define(_AttackKey,VK_CONTROL) //Choose your key here after defining vk code
define(_AttackKeyType,KEY_EXTENDED)
define(_AttackDelay,10) //Set delay in milliseconds

alloc(AutoAttack,512)
alloc(PressKey,128)
alloc(HoldAttack,1)
alloc(AttackDelay,4)
label(Exit)

define(KEY_PRESS,0)
define(KEY_UP,1)
define(MAPVK_VK_TO_VSC,0)

AttackDelay:
dd 0

PressKey:
push ebx
push edx
push esi
push ecx
mov edx, [esp+10+4]
mov esi, [esp+10+8]
mov ebx, [esp+10+C]
mov ecx, edx
push MAPVK_VK_TO_VSC
push ecx
call MapVirtualKeyA
shl eax,#16
shl esi,#24
shl ebx,#31
or eax, esi
or eax, ebx
mov ecx,eax
push ecx
push edx
call 01E33430 //A1 ?? ?? ?? ?? 85 C0 74 ?? 8D 48 ?? 8B 01 8B 00
pop ecx
pop esi
pop edx
pop ebx
ret 000C

AutoAttack:
cmp dword ptr [esp],01C2018A //8B C8 B8 ?? ?? ?? ?? F7 E9 C1 FA ?? 8B C2 C1 E8 ?? 03 C2 83 F8 ?? 74 ?? 81 F9 ?? ?? ?? ?? 75 ?? 80 BE ?? ?? ?? ?? ?? 74 ?? 8B 56 ?? 8B 42 ?? 8D 4E ?? FF D0

pushad
jne Exit
test eax,eax
je Exit
test eax,eax
inc [AttackDelay]
cmp [AttackDelay],_AttackDelay
jne Exit
mov [AttackDelay],0
push KEY_PRESS
push _AttackKeyType
push _AttackKey
call PressKey
cmp byte ptr [HoldAttack], 1
je Exit
nop
push KEY_UP
push _AttackKeyType
push _AttackKey
call PressKey
jmp Exit

Exit:
popad
jmp 01C3CD50

0267DDD0:
dd AutoAttack

[disable]
0267DDD0: // 4 Byte Scan
dd 01C3CD50 //6A ?? 68 ?? ?? ?? ?? 64 A1 ?? ?? ?? ?? 50 83 EC ?? 56 A1 ?? ?? ?? ?? 33 C4 50 8D 44 24 ?? 64 A3 ?? ?? ?? ?? 8B 0D ?? ?? ?? ?? 85 C9 74 ?? 8D 44 24 ?? 50 E8 ?? ?? ?? ?? 8B 44 24 ??

dealloc(AutoAttack)
dealloc(PressKey)
dealloc(HoldAttack)
dealloc(AttackDelay)
